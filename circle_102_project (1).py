# -*- coding: utf-8 -*-
"""Circle 102 Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wFM1znvNl20FNVTg8qO3-3KzsWubkseg

**Hello world**!

**Are you ready to elevate your data fetching game?**

**Are you ready to save time and get a quicker yet accurate result?**

**Have you heard of requests package in python yet?**

**Do you know how valuable and how functioning requests package in python can be?**

**Look no further and come closer to what i will be showing you on this project, i trust you wont want to miss out on this rare opportunity. The earlier you know it the better!**

**In this project, i will demonstrate the logic behind **"*requests package*" **your key to effortlessly making HTTP requests and unlocking a world of data!**

**You will always want to make use of it once you get the logic of how it works! Stay tuned!**

In simple terms, the 'requests' package in Python is like a helpful messanger that your Python program can use to ask for information from a website. Just as you might ask a friend to get you something, your Python program can use 'requests' to send requests(messages) to a website's server and get back the data it needs.

The requests package allows you to send HTTP requests using Python.

The HTTP request returns a Response Object with all the response data (content, encoding, status, etc).

The "requests" Python package was created to simplify the process of making HTTP requests, allowing developers to interact with web services seamlessly. In simpler terms, it serves as a handy tool to fetch information from the internet or send data to web servers.

To make things easier to understand, the Hypertext Transfer Protocol (HTTP) is a client-server request/response protocol that uses TCP/IP connections to exchange messages between the client and server.

HTTP clients such as web browsers or mobile applications send requests to an HTTP server, and the server responds to them with messages containing a status line, a header, and a body.

##Why do we need the 'requests' package?
The primary goal behind inventing "requests" was to streamline the complexities of working with HTTP in Python. It provides a user-friendly interface for making requests, handling responses, and managing various aspects of web communication without diving into the intricacies of the underlying protocols.

## What is 'requests' in python?
The requests library in Python is a popular third-party library that simplifies the process of making HTTP requests. It abstracts the complexities of making requests behind a simple API, making it easier for developers to interact with web services, APIs, and retrieve data from the internet.

## Key features and functionalities of the 'requests' package include:

1. Simplicity: The package provides a straightforward and user-friendly interface for sending HTTP requests, abstracting away much of the underlying complexity.

2. Support for HTTP Methods: It supports common HTTP methods like GET, POST, PUT, DELETE, etc., allowing you to interact with web services in various ways.

3. Handling URL Parameters and Headers: requests allows you to include parameters and headers in your requests, making it flexible for different types of requests.

4. Session Management: It supports sessions, allowing you to persist certain parameters across multiple requests. This is useful for handling things like cookies and authentication tokens.

5. Automatic Content Decoding: The package automatically handles content decoding based on the response headers, making it easy to work with different types of content, such as JSON or HTML.

6. File Uploads: requests supports file uploads, which is handy when interacting with APIs that require file attachments.

7. Timeouts and Retries: You can set timeouts and configure automatic retries for requests, enhancing the robustness of your applications.

**##How to use 'requests' Python Package using google collaboratory**

step 1: Click on "File" > "New notebook" to create a new Colab notebook.

step 2: Import the 'request' library using '**!pip install requests**' command in a cold cell as demonstrated below
"""

!pip install requests

"""step 3: Use 'request' to make a simple API request in a new cold cell as demonstrated below"""

import requests

"""Make a GET request to JSONPlaceholder API"""

response = requests.get("https://jsonplaceholder.typicode.com/todos/1")

"""To check if response was successful use the code as demonstrated below"""

if response.status_code == 200:
  data = response.json()

  #Specify the API endpoint and print
  print("Data retrieved from the API:")
  print("User ID:", data['userId'])
  print("Title:", data['title'])
  print("Completed:", data['completed'])

else:
  print(f"Error: {response.status_code}")

"""We also tried this on a LinkedIn url to ensure it works efficiently"""

# Let’s try making a request to a linkedn API
r = requests.get('https://www.linkedin.com/feed/')
print(r)
print(r.content)

"""Here is a another practical  use of the package.
In this example, "requests" simplifies the process of making a GET request to a weather API, allowing us to access temperature data for a specified city.
"""

import requests

# Specify the URL
url = 'https://en.wikipedia.org/wiki/Climate_of_the_United_States'

# Make the GET request
response = requests.get(url)

# Check if the request was successful (status code 200)
if response.status_code == 200:
    # Display the content of the response
    print(response.text)
else:
    print("Failed to retrieve data. Status code:", response.status_code)

"""Let’s take a closer look at the code and understand how it works:

1. We're creating a function called get_temperature that will retrieve the temperature for a given city using the OpenWeatherMap API. It takes two inputs: the API key (a secret code) and the name of the city.

2. We set up the URL for the OpenWeatherMap API (api_url) and create a dictionary (params) with parameters such as the city, API key, and the desired temperature unit.

3. We use the 'requests.get' method to send a request to the OpenWeatherMap API with the specified parameters and stores the response in the 'response' variable.

4. We check if the status code of the response is 200, which typically indicates a successful request.

5. If the request was successful, we convert the response into a readable format (JSON), extract the temperature information, and return it.

6. If the request was not successful, we print an error message along with the status code and return 'None' to indicate that we couldn't retrieve the temperature. We provide the function with our API key and the name of the city ('New York') and store the returned 'temperature' value in the temperature variable.

7. If we successfully obtained the temperature (i.e., it's not 'None'), we print a message displaying the current temperature for the specified city.
In summary, this code is like asking the OpenWeatherMap service for the temperature in a given city. If the request is successful, it extracts and displays the temperature; otherwise, it prints an error message.

This is an example of how we can use this package to connect with the web seamlessly, making our project not just smart but brilliantly responsive to real-world information.

## Get started today
Create a new Colab notebook and start fetching data with Python Requests

## Discover more

Visit the official requests documentation for tips, tricks, and advanced features:

## Request Library doccumentation
Ready to elevate your data-fetching experience? Python Requests in Google Colab is your gateway to seamless HTTP requests!

## Thank you for your time!
"""